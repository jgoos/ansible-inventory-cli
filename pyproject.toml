[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ansible-inventory-cli"
version = "4.0.0"
description = "Enterprise-grade Ansible inventory management with unified CLI, automated lifecycle management, and comprehensive validation"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "J Goossens", email = "jgoos@users.noreply.github.com"}
]
maintainers = [
    {name = "J Goossens", email = "jgoos@users.noreply.github.com"}
]
keywords = ["ansible", "inventory", "devops", "infrastructure", "automation", "cli"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Systems Administration",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]
requires-python = ">=3.7"
dependencies = [
    "PyYAML>=6.0",
    "pathlib2>=2.3.0; python_version<'3.4'",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pre-commit>=3.0.0",
    "isort>=5.12.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "coverage>=7.0.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-include-markdown-plugin>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/company/ansible-inventory-cli"
Documentation = "https://github.com/company/ansible-inventory-cli#readme"
Repository = "https://github.com/company/ansible-inventory-cli.git"
"Bug Tracker" = "https://github.com/company/ansible-inventory-cli/issues"

# Console script entry point for when package is installed
# Usage: pip install -e . && ansible-inventory-cli <command>
# For direct script execution use: python scripts/ansible_inventory_cli.py <command>
[project.scripts]
ansible-inventory-cli = "scripts.ansible_inventory_cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["scripts*"]

[tool.setuptools.package-data]
scripts = ["*.py"]

# Black (Code Formatter)
[tool.black]
line-length = 88
target-version = ['py37', 'py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
)/
'''

# isort (Import Sorting)
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["scripts"]

# MyPy (Static Type Checking)
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "yaml.*",
]
ignore_missing_imports = true

# Pytest (Testing Framework)
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
]

# Coverage (Test Coverage)
[tool.coverage.run]
source = ["scripts"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Bandit (Security Linting)
[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test

# Flake8 configuration (in setup.cfg since flake8 doesn't support pyproject.toml yet) 